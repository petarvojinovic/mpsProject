package NewLanguagePetar.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Agregation;
  private ConceptPresentation props_Constraint;
  private ConceptPresentation props_DomainInfo;
  private ConceptPresentation props_DomainInstance;
  private ConceptPresentation props_DomainTable;
  private ConceptPresentation props_ExclusiveSpecialization;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_NonExclusiveSpecialization;
  private ConceptPresentation props_Reference;
  private ConceptPresentation props_Set;
  private ConceptPresentation props_Structure;
  private ConceptPresentation props_StructureReference;
  private ConceptPresentation props_StructureRepository;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Agregation:
        if (props_Agregation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Agregation = cpb.create();
        }
        return props_Agregation;
      case LanguageConceptSwitch.Constraint:
        if (props_Constraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Constraint");
          props_Constraint = cpb.create();
        }
        return props_Constraint;
      case LanguageConceptSwitch.DomainInfo:
        if (props_DomainInfo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DomainInfo");
          props_DomainInfo = cpb.create();
        }
        return props_DomainInfo;
      case LanguageConceptSwitch.DomainInstance:
        if (props_DomainInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainInstance = cpb.create();
        }
        return props_DomainInstance;
      case LanguageConceptSwitch.DomainTable:
        if (props_DomainTable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DomainTable = cpb.create();
        }
        return props_DomainTable;
      case LanguageConceptSwitch.ExclusiveSpecialization:
        if (props_ExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExclusiveSpecialization = cpb.create();
        }
        return props_ExclusiveSpecialization;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.NonExclusiveSpecialization:
        if (props_NonExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NonExclusiveSpecialization = cpb.create();
        }
        return props_NonExclusiveSpecialization;
      case LanguageConceptSwitch.Reference:
        if (props_Reference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Reference = cpb.create();
        }
        return props_Reference;
      case LanguageConceptSwitch.Set:
        if (props_Set == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Set = cpb.create();
        }
        return props_Set;
      case LanguageConceptSwitch.Structure:
        if (props_Structure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Structure = cpb.create();
        }
        return props_Structure;
      case LanguageConceptSwitch.StructureReference:
        if (props_StructureReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructureReference = cpb.create();
        }
        return props_StructureReference;
      case LanguageConceptSwitch.StructureRepository:
        if (props_StructureRepository == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StructureRepository = cpb.create();
        }
        return props_StructureRepository;
    }
    return null;
  }
}
